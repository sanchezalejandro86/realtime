#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('realtime:server');
var http = require('http');

var expressPeerServer = require('peer').ExpressPeerServer;

var Clase = require('../model/clase');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '5000');
    //ip = process.env.IP;
app.set('port', port);

var server = http.createServer(app);

app.use('/peerjs', expressPeerServer(server));

server.listen(port, function(){
    //console.log('Express server listening on ' + ip + ':' + port);
    console.log('Express server listening on ' + port);
});

server.on('connection', function(id) {
    //console.log('conn ' + id);
});

server.on('disconnect', function(id) {
    //console.log('disc ' + id);
});


var socketsPeers = [];
var io = require('socket.io').listen(server);

io.on('connection', function(socket){

    socket.on('search changed', function(data){
        socket.broadcast.emit('search changed', data);
    });
    socket.on('newStudentConnected', function (data) {
        socketsPeers[socket.id] = data.peerId;
        io.sockets.emit('newStudentConnected', data);
    });
    socket.on('studentDisconnected', function (data) {
        io.sockets.emit('studentDisconnected', data);
    });
    socket.on('disconnect', function() {
        var peerId = socketsPeers[socket.id];
        if (peerId != null){
            io.sockets.emit('studentDisconnected', { peerId: peerId });
        }
    });
    socket.on('newMessageChat', function (data) {
        socket.broadcast.emit('newMessageChat', data);
        Clase.addMessage(data.classRoom, data.inputId, data.author, data.text, data.teacher);
    });
    socket.on('messageChatChanged', function (data) {
        if (data.update)
            Clase.updateMessage(data.classRoom, data.inputId, data.text);
        socket.broadcast.emit('messageChatChanged', data);
    });
    socket.on('messageRemoved', function (data){
        Clase.removeMessage(data.classRoom, data.inputId);
        socket.broadcast.emit('messageRemoved', data);
    });
    socket.on('full size image', function (data) {
        io.sockets.emit('full size image', data);
    });
    socket.on('clear search images', function (data) {
        io.sockets.emit('clear search images', data);
    });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
